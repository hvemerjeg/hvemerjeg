#/usr/bin/python3

#This script is a simple example of a directory enumeration tool through HTTP status code response.

#This script works by sending an HTTP request to the target URL at target directory. Then depending on the status code of the response it determines if the directory exists or no.

#Since there may be redirections when a directory does not exist it may output some false positives.

#This script does not implement threads, so if you want something fast use a known tool as dirb, gobuster or wfuzz. Or implement by yourself through the threading library the desired feature.

#This is just an easy script example on how to programm a directory enumeration tool with Python. Not a powerful tool.

#Usage: ./directory_enumeration.py http://192.168.56.7 dictionary.txt

import os, requests, sys, time

# Color
red = "\033[1;31;40m"
green = "\033[1;32;40m"
reset_color = "\033[0m"

if len(sys.argv) != 3:
    sys.stderr.write(f"{green}[+] Usage: {sys.argv[0]} URL dictionary.txt{reset_color}\n")
    exit(1)

#Gobal variables
url = sys.argv[1]
dictionary = sys.argv[2]

def readDictionary(dictionary: str):
    try:
        f = open(dictionary, encoding="utf-8")
    except IOError as e:
        exit(f"{green}I/O Error occurred: {os.strerror(e.errno)}{reset_color}")
    return f

def makeRequest(url: str, directory: str):
    target_url = f"{url}/{directory}"
    try:
        r = requests.get(target_url)
        if r.status_code != 404:
            return print(f"{green}[+] Directory found --> {target_url}{reset_color}")
    except:
        pass

def main():
    dictionary_stream = readDictionary(dictionary)
    print(f"{green}[+] Starting directory enumeration{reset_color}\n\n")
    time.sleep(2) 
    for directory in dictionary_stream:
        makeRequest(url, directory.strip())

if __name__ == '__main__':
    main()
